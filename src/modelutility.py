# -*- coding: utf-8 -*-
"""modelUtility.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mTq74D5hubH42q2cqEm_QjbowrWqm56l
"""

import pandas as pd
from sklearn.metrics import confusion_matrix
import seaborn as sns
from sklearn.metrics import confusion_matrix

def predictionFunction(X_test,dataCopy,model,labels):
  import numpy as np
  pred_df = pd.DataFrame()
  pred = model.predict(X_test)
  pred_df['tweets'] = dataCopy.text.iloc[int(len(dataCopy)*0.8):]
  pred_df['actual'] = dataCopy.airline_sentiment.iloc[int(len(dataCopy)*0.8):]
  pred_df['predicted'] = None
  for i in range(len(X_test)):
    pred_df.predicted.iloc[i] = labels[np.argmax(pred[i])]
  pred_df.to_csv("predictions.csv")

def plot_confusion_matrix(model, X_test, y_test):
    import numpy as np
    import pandas as pd
    from sklearn.metrics import confusion_matrix
    import seaborn as sns
    from sklearn.metrics import confusion_matrix
    import matplotlib.pyplot as plt
    sentiment_classes = ['positive', 'negative', 'neutral']
    # use model to do the prediction
    y_pred = model.predict(X_test)
    cm = confusion_matrix(np.argmax(np.array(y_test),axis=1), np.argmax(y_pred, axis=1))
    plt.figure(figsize=(8,6))
    sns.heatmap(cm, cmap=plt.cm.Blues, annot=True, fmt='d', 
                xticklabels=sentiment_classes,
                yticklabels=sentiment_classes)
    plt.title('Confusion matrix', fontsize=16)
    plt.xlabel('Actual label', fontsize=12)
    plt.ylabel('Predicted label', fontsize=12)
    return cm
    
def confusionMatrix(model, X_test, y_test):
 
  cm = plot_confusion_matrix(model, X_test, y_test)
  print('Confusion matrix: ')
  print(cm)
  print('Prediction Accuracy: ')
  print('Accuracy of Positive class in % : ')
  print((cm[0][0]/(cm[0][0]+cm[0][1]+cm[0][2]))*100)
  print('Accuracy of Negative class in %: ')
  print((cm[1][1]/(cm[1][1]+cm[1][0]+cm[1][2]))*100)
  print('Accuracy of Neutral class in %')
  print((cm[2][2]/(cm[2][2]+cm[2][0]+cm[2][1]))*100)